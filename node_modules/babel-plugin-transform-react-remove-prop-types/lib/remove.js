<<<<<<< HEAD
<<<<<<< HEAD
"use strict";
=======
'use strict';
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
=======
'use strict';
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = remove;
<<<<<<< HEAD
<<<<<<< HEAD

//  weak

/* eslint-disable no-param-reassign */
=======
//  weak

>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
=======
//  weak

>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
function isInside(scope, regex) {
  if (!scope.hub.file.opts) {
    return true;
  }

  var filename = scope.hub.file.opts.filename;

  if (!filename) {
    return true;
  }

  return filename.match(regex) !== null;
<<<<<<< HEAD
<<<<<<< HEAD
} // Remove a specific path.


=======
}

// Remove a specific path.
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
=======
}

// Remove a specific path.
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
function remove(path, globalOptions, options) {
  var visitedKey = globalOptions.visitedKey,
      unsafeWrapTemplate = globalOptions.unsafeWrapTemplate,
      wrapTemplate = globalOptions.wrapTemplate,
      mode = globalOptions.mode,
      ignoreFilenames = globalOptions.ignoreFilenames,
      types = globalOptions.types;

<<<<<<< HEAD
<<<<<<< HEAD
  if (ignoreFilenames && isInside(path.scope, ignoreFilenames)) {
    return;
  } // Prevent infinity loop.


=======
=======
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b

  if (ignoreFilenames && isInside(path.scope, ignoreFilenames)) {
    return;
  }

  // Prevent infinity loop.
<<<<<<< HEAD
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
=======
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
  if (path.node[visitedKey]) {
    return;
  }

  path.node[visitedKey] = true;

  if (mode === 'remove') {
    // remove() crash in some conditions.
    if (path.parentPath.type === 'ConditionalExpression') {
      path.replaceWith(types.unaryExpression('void', types.numericLiteral(0)));
    } else {
      path.remove();
    }

    return;
  }

  if (mode === 'wrap' || mode === 'unsafe-wrap') {
    switch (options.type) {
      // This is legacy, we do not optimize it.
      case 'createClass':
        break;
<<<<<<< HEAD
<<<<<<< HEAD
      // Inspired from babel-plugin-transform-class-properties.

      case 'class static':
        {
          var ref;
=======
=======
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b

      // Inspired from babel-plugin-transform-class-properties.
      case 'class static':
        {
          var ref = void 0;
<<<<<<< HEAD
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
=======
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
          var pathClassDeclaration = options.pathClassDeclaration;

          if (!pathClassDeclaration.isClassExpression() && pathClassDeclaration.node.id) {
            ref = pathClassDeclaration.node.id;
          } else {
            // Class without name not supported
            return;
          }

<<<<<<< HEAD
<<<<<<< HEAD
          var node = types.expressionStatement(types.assignmentExpression('=', types.memberExpression(ref, path.node.key), path.node.value)); // We need to append the node at the parent level in this case.

          if (pathClassDeclaration.parentPath.isExportDeclaration()) {
            pathClassDeclaration = pathClassDeclaration.parentPath;
          }

=======
=======
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
          var node = types.expressionStatement(types.assignmentExpression('=', types.memberExpression(ref, path.node.key), path.node.value));

          // We need to append the node at the parent level in this case.
          if (pathClassDeclaration.parentPath.isExportDeclaration()) {
            pathClassDeclaration = pathClassDeclaration.parentPath;
          }
<<<<<<< HEAD
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
=======
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
          pathClassDeclaration.insertAfter(node);
          path.remove();
          break;
        }

      case 'assign':
        if (mode === 'unsafe-wrap') {
          path.replaceWith(unsafeWrapTemplate({
            NODE: path.node
          }));
        } else {
          path.replaceWith(wrapTemplate({
            LEFT: path.node.left,
            RIGHT: path.node.right
          }));
        }
<<<<<<< HEAD
<<<<<<< HEAD

=======
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
=======
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
        path.node[visitedKey] = true;
        break;

      default:
        break;
    }

    return;
  }

<<<<<<< HEAD
<<<<<<< HEAD
  throw new Error("transform-react-remove-prop-type: unsupported mode ".concat(mode, "."));
=======
  throw new Error('transform-react-remove-prop-type: unsupported mode ' + mode + '.');
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
=======
  throw new Error('transform-react-remove-prop-type: unsupported mode ' + mode + '.');
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
}