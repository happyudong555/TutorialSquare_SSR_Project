// @flow
import type { Interpolation, Target } from '../types'

export default (css: Function) => {
<<<<<<< HEAD
<<<<<<< HEAD
  const constructWithOptions = (
    componentConstructor: Function,
    tag: Target,
    options: Object = {},
  ) => {
    if (
      process.env.NODE_ENV !== 'production' &&
      typeof tag !== 'string' &&
      typeof tag !== 'function'
    ) {
=======
=======
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
  const constructWithOptions = (componentConstructor: Function,
                                tag: Target,
                                options: Object = {}) => {
    if (typeof tag !== 'string' && typeof tag !== 'function') {
<<<<<<< HEAD
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
=======
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
      // $FlowInvalidInputTest
      throw new Error(`Cannot create styled-component for component: ${tag}`)
    }

    /* This is callable directly as a template function */
<<<<<<< HEAD
<<<<<<< HEAD
    const templateFunction = (
      strings: Array<string>,
      ...interpolations: Array<Interpolation>
    ) => componentConstructor(tag, options, css(strings, ...interpolations))
=======
    const templateFunction =
      (strings: Array<string>, ...interpolations: Array<Interpolation>) =>
        componentConstructor(tag, options, css(strings, ...interpolations))
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
=======
    const templateFunction =
      (strings: Array<string>, ...interpolations: Array<Interpolation>) =>
        componentConstructor(tag, options, css(strings, ...interpolations))
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b

    /* If config methods are called, wrap up a new template function and merge options */
    templateFunction.withConfig = config =>
      constructWithOptions(componentConstructor, tag, { ...options, ...config })
    templateFunction.attrs = attrs =>
<<<<<<< HEAD
<<<<<<< HEAD
      constructWithOptions(componentConstructor, tag, {
        ...options,
        attrs: { ...(options.attrs || {}), ...attrs },
      })
=======
      constructWithOptions(componentConstructor, tag, { ...options,
        attrs: { ...(options.attrs || {}), ...attrs } })
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
=======
      constructWithOptions(componentConstructor, tag, { ...options,
        attrs: { ...(options.attrs || {}), ...attrs } })
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b

    return templateFunction
  }

  return constructWithOptions
}
