#!/usr/bin/env node
<<<<<<< HEAD
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _path = require("path");

var _fs = require("fs");

var _minimist = _interopRequireDefault(require("minimist"));

var _export = _interopRequireDefault(require("../server/export"));

var _utils = require("../lib/utils");

var argv = (0, _minimist.default)(process.argv.slice(2), {
=======
'use strict';

var _path = require('path');

var _fs = require('fs');

var _minimist = require('minimist');

var _minimist2 = _interopRequireDefault(_minimist);

var _export = require('../server/export');

var _export2 = _interopRequireDefault(_export);

var _utils = require('../lib/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var argv = (0, _minimist2.default)(process.argv.slice(2), {
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
  alias: {
    h: 'help',
    s: 'silent',
    o: 'outdir'
  },
  boolean: ['h'],
  default: {
    s: false,
    o: null
  }
});

if (argv.help) {
<<<<<<< HEAD
  console.log("\n    Description\n      Exports the application for production deployment\n\n    Usage\n      $ next export [options] <dir>\n\n    <dir> represents where the compiled dist folder should go.\n    If no directory is provided, the 'out' folder will be created in the current directory.\n\n    Options\n      -h - list this help\n      -o - set the output dir (defaults to 'out')\n      -s - do not print any messages to console\n  ");
  process.exit(0);
}

var dir = (0, _path.resolve)(argv._[0] || '.'); // Check if pages dir exists and warn if not

if (!(0, _fs.existsSync)(dir)) {
  (0, _utils.printAndExit)("> No such directory exists as the project root: ".concat(dir));
=======
  console.log('\n    Description\n      Exports the application for production deployment\n\n    Usage\n      $ next export [options] <dir>\n\n    <dir> represents where the compiled dist folder should go.\n    If no directory is provided, the \'out\' folder will be created in the current directory.\n\n    Options\n      -h - list this help\n      -o - set the output dir (defaults to \'out\')\n      -s - do not print any messages to console\n  ');
  process.exit(0);
}

var dir = (0, _path.resolve)(argv._[0] || '.');

// Check if pages dir exists and warn if not
if (!(0, _fs.existsSync)(dir)) {
  (0, _utils.printAndExit)('> No such directory exists as the project root: ' + dir);
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
}

if (!(0, _fs.existsSync)((0, _path.join)(dir, 'pages'))) {
  if ((0, _fs.existsSync)((0, _path.join)(dir, '..', 'pages'))) {
    (0, _utils.printAndExit)('> No `pages` directory found. Did you mean to run `next` in the parent (`../`) directory?');
  }

  (0, _utils.printAndExit)('> Couldn\'t find a `pages` directory. Please create one under the project root');
}

var options = {
  silent: argv.silent,
  outdir: argv.outdir ? (0, _path.resolve)(argv.outdir) : (0, _path.resolve)(dir, 'out')
};
<<<<<<< HEAD
(0, _export.default)(dir, options).catch(function (err) {
  (0, _utils.printAndExit)(err);
=======

(0, _export2.default)(dir, options).catch(function (err) {
  console.error(err);
  process.exit(1);
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
});