<<<<<<< HEAD
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
=======
'use strict';
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b

Object.defineProperty(exports, "__esModule", {
  value: true
});
<<<<<<< HEAD
exports.default = void 0;

var _promise = _interopRequireDefault(require("@babel/runtime/core-js/promise"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _EventEmitter = _interopRequireDefault(require("./EventEmitter"));

/* global window, document */
var webpackModule = module;

var PageLoader =
/*#__PURE__*/
function () {
  function PageLoader(buildId, assetPrefix) {
    (0, _classCallCheck2.default)(this, PageLoader);
    this.buildId = buildId;
    this.assetPrefix = assetPrefix;
    this.pageCache = {};
    this.pageLoadedHandlers = {};
    this.pageRegisterEvents = new _EventEmitter.default();
    this.loadingRoutes = {};
    this.chunkRegisterEvents = new _EventEmitter.default();
    this.loadedChunks = {};
  }

  (0, _createClass2.default)(PageLoader, [{
    key: "normalizeRoute",
    value: function normalizeRoute(route) {
      if (route[0] !== '/') {
        throw new Error("Route name should start with a \"/\", got \"".concat(route, "\""));
      }

      route = route.replace(/\/index$/, '/');
=======

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _EventEmitter = require('./EventEmitter');

var _EventEmitter2 = _interopRequireDefault(_EventEmitter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var webpackModule = module; /* global window, document, __NEXT_DATA__ */

var PageLoader = function () {
  function PageLoader(buildId, assetPrefix) {
    (0, _classCallCheck3.default)(this, PageLoader);

    this.buildId = buildId;
    this.assetPrefix = assetPrefix;

    this.pageCache = {};
    this.pageLoadedHandlers = {};
    this.pageRegisterEvents = new _EventEmitter2.default();
    this.loadingRoutes = {};

    this.chunkRegisterEvents = new _EventEmitter2.default();
    this.loadedChunks = {};
  }

  (0, _createClass3.default)(PageLoader, [{
    key: 'normalizeRoute',
    value: function normalizeRoute(route) {
      if (route[0] !== '/') {
        throw new Error('Route name should start with a "/", got "' + route + '"');
      }
      route = route.replace(/\/index$/, '/');

>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
      if (route === '/') return route;
      return route.replace(/\/$/, '');
    }
  }, {
<<<<<<< HEAD
    key: "loadPage",
=======
    key: 'loadPage',
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
    value: function loadPage(route) {
      var _this = this;

      route = this.normalizeRoute(route);
<<<<<<< HEAD
      return new _promise.default(function (resolve, reject) {
=======

      return new _promise2.default(function (resolve, reject) {
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
        var fire = function fire(_ref) {
          var error = _ref.error,
              page = _ref.page;

          _this.pageRegisterEvents.off(route, fire);
<<<<<<< HEAD

=======
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
          delete _this.loadingRoutes[route];

          if (error) {
            reject(error);
          } else {
            resolve(page);
          }
<<<<<<< HEAD
        }; // If there's a cached version of the page, let's use it.


        var cachedPage = _this.pageCache[route];

        if (cachedPage) {
          var error = cachedPage.error,
              page = cachedPage.page;
          error ? reject(error) : resolve(page);
          return;
        } // Register a listener to get the page


        _this.pageRegisterEvents.on(route, fire); // If the page is loading via SSR, we need to wait for it
        // rather downloading it again.


        if (document.getElementById("__NEXT_PAGE__".concat(route))) {
          return;
        } // Load the script if not asked to load yet.


        if (!_this.loadingRoutes[route]) {
          _this.loadScript(route);

=======
        };

        // If there's a cached version of the page, let's use it.
        var cachedPage = _this.pageCache[route];
        if (cachedPage) {
          var error = cachedPage.error,
              page = cachedPage.page;

          error ? reject(error) : resolve(page);
          return;
        }

        // Register a listener to get the page
        _this.pageRegisterEvents.on(route, fire);

        // If the page is loading via SSR, we need to wait for it
        // rather downloading it again.
        if (document.getElementById('__NEXT_PAGE__' + route)) {
          return;
        }

        // Load the script if not asked to load yet.
        if (!_this.loadingRoutes[route]) {
          _this.loadScript(route);
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
          _this.loadingRoutes[route] = true;
        }
      });
    }
  }, {
<<<<<<< HEAD
    key: "loadScript",
=======
    key: 'loadScript',
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
    value: function loadScript(route) {
      var _this2 = this;

      route = this.normalizeRoute(route);
<<<<<<< HEAD
      var scriptRoute = route === '/' ? '/index.js' : "".concat(route, ".js");
      var script = document.createElement('script');
      var url = "".concat(this.assetPrefix, "/_next/").concat(encodeURIComponent(this.buildId), "/page").concat(scriptRoute);
      script.src = url;

      script.onerror = function () {
        var error = new Error("Error when loading route: ".concat(route));
        error.code = 'PAGE_LOAD_ERROR';

        _this2.pageRegisterEvents.emit(route, {
          error: error
        });
      };

      document.body.appendChild(script);
    } // This method if called by the route code.

  }, {
    key: "registerPage",
=======

      if (__NEXT_DATA__.nextExport) {
        route = route === '/' ? '/index.js' : route + '/index.js';
      }

      var script = document.createElement('script');
      var url = this.assetPrefix + '/_next/' + encodeURIComponent(this.buildId) + '/page' + route;
      script.src = url;
      script.type = 'text/javascript';
      script.onerror = function () {
        var error = new Error('Error when loading route: ' + route);
        _this2.pageRegisterEvents.emit(route, { error: error });
      };

      document.body.appendChild(script);
    }

    // This method if called by the route code.

  }, {
    key: 'registerPage',
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
    value: function registerPage(route, regFn) {
      var _this3 = this;

      var register = function register() {
        try {
          var _regFn = regFn(),
              error = _regFn.error,
              page = _regFn.page;

<<<<<<< HEAD
          _this3.pageCache[route] = {
            error: error,
            page: page
          };

          _this3.pageRegisterEvents.emit(route, {
            error: error,
            page: page
          });
        } catch (error) {
          _this3.pageCache[route] = {
            error: error
          };

          _this3.pageRegisterEvents.emit(route, {
            error: error
          });
        }
      }; // Wait for webpack to become idle if it's not.
      // More info: https://github.com/zeit/next.js/pull/1511


      if (webpackModule && webpackModule.hot && webpackModule.hot.status() !== 'idle') {
        console.log("Waiting for webpack to become \"idle\" to initialize the page: \"".concat(route, "\""));
=======
          _this3.pageCache[route] = { error: error, page: page };
          _this3.pageRegisterEvents.emit(route, { error: error, page: page });
        } catch (error) {
          _this3.pageCache[route] = { error: error };
          _this3.pageRegisterEvents.emit(route, { error: error });
        }
      };

      // Wait for webpack to become idle if it's not.
      // More info: https://github.com/zeit/next.js/pull/1511
      if (webpackModule && webpackModule.hot && webpackModule.hot.status() !== 'idle') {
        console.log('Waiting for webpack to become "idle" to initialize the page: "' + route + '"');
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b

        var check = function check(status) {
          if (status === 'idle') {
            webpackModule.hot.removeStatusHandler(check);
            register();
          }
        };
<<<<<<< HEAD

=======
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
        webpackModule.hot.status(check);
      } else {
        register();
      }
    }
  }, {
<<<<<<< HEAD
    key: "registerChunk",
=======
    key: 'registerChunk',
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
    value: function registerChunk(chunkName, regFn) {
      var chunk = regFn();
      this.loadedChunks[chunkName] = true;
      this.chunkRegisterEvents.emit(chunkName, chunk);
    }
  }, {
<<<<<<< HEAD
    key: "waitForChunk",
=======
    key: 'waitForChunk',
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
    value: function waitForChunk(chunkName, regFn) {
      var _this4 = this;

      var loadedChunk = this.loadedChunks[chunkName];
<<<<<<< HEAD

      if (loadedChunk) {
        return _promise.default.resolve(true);
      }

      return new _promise.default(function (resolve) {
        var register = function register(chunk) {
          _this4.chunkRegisterEvents.off(chunkName, register);

=======
      if (loadedChunk) {
        return _promise2.default.resolve(true);
      }

      return new _promise2.default(function (resolve) {
        var register = function register(chunk) {
          _this4.chunkRegisterEvents.off(chunkName, register);
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
          resolve(chunk);
        };

        _this4.chunkRegisterEvents.on(chunkName, register);
      });
    }
  }, {
<<<<<<< HEAD
    key: "clearCache",
=======
    key: 'clearCache',
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
    value: function clearCache(route) {
      route = this.normalizeRoute(route);
      delete this.pageCache[route];
      delete this.loadingRoutes[route];
<<<<<<< HEAD
      var script = document.getElementById("__NEXT_PAGE__".concat(route));

=======

      var script = document.getElementById('__NEXT_PAGE__' + route);
>>>>>>> 3e7cc9eba236ff5c5205c34bae31be88b995768b
      if (script) {
        script.parentNode.removeChild(script);
      }
    }
  }]);
  return PageLoader;
}();

exports.default = PageLoader;